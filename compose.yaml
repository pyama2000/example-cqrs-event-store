include:
  - ./services/tenant/compose.yaml
  - ./services/cart/compose.yaml
  - ./services/order/compose.yaml
services:
  grafana:
    image: grafana/grafana@sha256:0dc5a246ab16bb2c38a349fb588174e832b4c6c2db0981d0c3e6cd774ba66a54
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor
      GRAFANA_TEMPO_HOST: grafana-tempo
      GRAFANA_LOKI_HOST: grafana-loki
      PROMETHEUS_HOST: prometheus
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
  grafana-tempo:
    image: grafana/tempo@sha256:a5a16b88cf79eb23d1c0ce523607688797aeec95242ea2dedd0c1b65c7a4fb13
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    environment:
      GRAFANA_TEMPO_LOG_LEVEL: "${GRAFANA_TEMPO_LOG_LEVEL:-error}"
      GRAFANA_TEMPO_HOST: grafana-tempo
      PROMETHEUS_HOST: prometheus
    command: ["-config.file=/etc/tempo.yaml", "-config.expand-env=true"]
    healthcheck:
      test:
        [
          "CMD",
          "/busybox/wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://127.0.0.1:3200/ready",
        ]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 3
  grafana-loki:
    image: grafana/loki@sha256:8af2de1abbdd7aa92b27c9bcc96f0f4140c9096b507c77921ffddf1c6ad6c48f
    volumes:
      - ./config/loki.yaml:/etc/loki.yaml
    command: ["-config.file=/etc/loki.yaml"]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:3100/ready || exit 1
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 3
  prometheus:
    image: prom/prometheus@sha256:6559acbd5d770b15bb3c954629ce190ac3cbbdb2b7f1c30f0385c4e05104e218
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    command:
      [
        "--config.file=/etc/prometheus.yaml",
        "--web.enable-remote-write-receiver",
        "--web.enable-otlp-receiver",
        "--enable-feature=exemplar-storage",
        "--enable-feature=native-histograms",
      ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://127.0.0.1:9090/-/ready || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
  opentelemetry-collector-gateway:
    image: otel/opentelemetry-collector@sha256:3b70e78f044c5d3145a00fc6ba28a771caa769c51eae60311b882e2a229af927
    volumes:
      - ./config/opentelemetry-collector/gateway.yaml:/etc/config.yaml
    environment:
      OPENTELEMETRY_COLLECTOR_HOST: opentelemetry-collector-gateway
      GRAFANA_TEMPO_HOST: grafana-tempo
      GRAFANA_LOKI_HOST: grafana-loki
      PROMETHEUS_HOST: prometheus
    command: ["--config=/etc/config.yaml"]
    depends_on:
      grafana:
        condition: service_healthy
      grafana-tempo:
        condition: service_healthy
      grafana-loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
  localstack:
    image: localstack/localstack@sha256:722a22bc441ffcaffa434c1720b04f8bfec60cc24b419ebdc4343cc43908de7f
    ports:
      - "${LOCALSTACK_GATEWAY_PORT:-4566}:4566"
      - "${LOCALSTACK_EXTERNAL_SERVICE_PORT_RANGE:-4510-4559}:4510-4559"
    volumes:
      - "${DOCKER_HOST_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
  # NOTE: ./terraformディレクトリをバインドマウントして名前付きボリューム(terraform-volume)にコピーする
  terraform-setup:
    image: bash:latest
    volumes:
      - ./terraform:/terraform-origin
      - terraform-volume:/terraform
    command: ["cp", "-rT", "/terraform-origin", "/terraform"]
  terraform-init:
    image: hashicorp/terraform:1.10.4
    working_dir: /terraform
    volumes:
      - terraform-volume:/terraform
    command: ["init"]
    depends_on:
      terraform-setup:
        condition: service_completed_successfully
  terraform-apply:
    image: hashicorp/terraform:1.10.4
    working_dir: /terraform
    volumes:
      - terraform-volume:/terraform
    environment:
      TF_VAR_aws_service_endpoint: "http://localstack:4566"
      TF_VAR_service_endpoints: '{ "cart": "cart-service:50051", "order": "order-service:50051" }'
    command: ["apply", "-auto-approve"]
    depends_on:
      localstack:
        condition: service_started
      terraform-init:
        condition: service_completed_successfully
  tenant-service:
    image: tenant-service:latest
    pull_policy: never
    ports:
      - "${TENANT_SERVICE_PORT:-50051}:50051"
    environment:
      LOCALSTACK_GATEWAY_HOST: localstack
      OPENTELEMETRY_COLLECTOR_HOST: tenant-opentelemetry-collector
    depends_on:
      tenant-opentelemetry-collector:
        condition: service_started
      localstack:
        condition: service_started
  cart-service:
    image: cart-service:latest
    pull_policy: never
    ports:
      - "${CART_SERVICE_PORT:-50052}:50051"
    environment:
      LOCALSTACK_GATEWAY_HOST: localstack
      OPENTELEMETRY_COLLECTOR_HOST: cart-opentelemetry-collector
    depends_on:
      cart-opentelemetry-collector:
        condition: service_started
      localstack:
        condition: service_started
  order-service:
    image: order-service:latest
    pull_policy: never
    ports:
      - "${ORDER_SERVICE_PORT:-50053}:50051"
    environment:
      LOCALSTACK_GATEWAY_HOST: localstack
      OPENTELEMETRY_COLLECTOR_HOST: order-opentelemetry-collector
    depends_on:
      order-opentelemetry-collector:
        condition: service_started
      localstack:
        condition: service_started
volumes:
  terraform-volume:
    name: terraform
