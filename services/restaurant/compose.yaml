services:
  mysql:
    image: mysql:9.0.0
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_USER: "root"
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "query_model"
    healthcheck:
      test: "mysqladmin ping --host 127.0.0.1 --user root -proot"
      interval: 10s
      timeout: 20s
      retries: 10
  migration:
    image: migrate/migrate:v4.17.1
    volumes:
      - ./database/migration/query-model:/migration
    command:
      [
        "-path=/migration/",
        "-database",
        "mysql://root:root@tcp(mysql:3306)/query_model",
        "up",
      ]
    depends_on:
      mysql:
        condition: service_healthy
  localstack:
    image: localstack/localstack@sha256:722a22bc441ffcaffa434c1720b04f8bfec60cc24b419ebdc4343cc43908de7f
    ports:
      - "${LOCALSTACK_GATEWAY_PORT:-4566}:4566"
      - "${LOCALSTACK_EXTERNAL_SERVICE_PORT_RANGE:-4510-4559}:4510-4559"
    volumes:
      - "${DOCKER_HOST_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
  # ./terraform ディレクトリをバインドマウントして名前付きボリューム (terraform-volume) にコピーする
  terraform-setup:
    image: bash:latest
    volumes:
      - ./terraform:/terraform-origin
      - terraform-volume:/terraform
    command: ["cp", "-rT", "/terraform-origin", "/terraform"]
  terraform-init:
    image: hashicorp/terraform:1.9.2
    working_dir: /terraform
    volumes:
      - terraform-volume:/terraform
    command: ["init"]
    depends_on:
      terraform-setup:
        condition: service_completed_successfully
  terraform-apply:
    image: hashicorp/terraform:1.9.2
    working_dir: /terraform
    environment:
      TF_VAR_aws_service_endpoint: "http://localstack:${LOCALSTACK_GATEWAY_PORT:-4566}"
    volumes:
      - terraform-volume:/terraform
    command: ["apply", "-auto-approve"]
    depends_on:
      localstack:
        condition: service_started
      terraform-init:
        condition: service_completed_successfully
  # ./ ディレクトリをバインドマウントして名前付きボリューム (cargo-lambda-volume) にコピーする
  cargo-lambda-setup:
    image: bash:latest
    volumes:
      - ./:/app-origin
      - cargo-lambda-volume:/app
    command: ["cp", "-rT", "/app-origin", "/app"]
  event-router-build:
    image: ghcr.io/cargo-lambda/cargo-lambda:1.3.0
    working_dir: /app
    volumes:
      - cargo-lambda-volume:/app
    command:
      [
        "cargo",
        "lambda",
        "build",
        "--release",
        "--arm64",
        "--bin=event_router",
        "--no-default-features",
        "--features=event_router",
      ]
    depends_on:
      cargo-lambda-setup:
        condition: service_completed_successfully
  event-router-deploy:
    image: ghcr.io/cargo-lambda/cargo-lambda:1.3.0
    working_dir: /app
    volumes:
      - cargo-lambda-volume:/app
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: ap-northeast-1
    command:
      [
        "cargo",
        "lambda",
        "deploy",
        "--endpoint-url=http://localstack:${LOCALSTACK_GATEWAY_PORT:-4566}",
        "--binary-name=event_router",
        "restaurant-service-event-router",
      ]
    depends_on:
      terraform-apply:
        condition: service_completed_successfully
      event-router-build:
        condition: service_completed_successfully
  query-model-mapper-build:
    image: ghcr.io/cargo-lambda/cargo-lambda:1.3.0
    working_dir: /app
    volumes:
      - cargo-lambda-volume:/app
    command:
      [
        "cargo",
        "lambda",
        "build",
        "--release",
        "--arm64",
        "--bin=query_model_mapper",
        "--no-default-features",
        "--features=query_model_mapper",
      ]
    depends_on:
      cargo-lambda-setup:
        condition: service_completed_successfully
  query-model-mapper-deploy:
    image: ghcr.io/cargo-lambda/cargo-lambda:1.3.0
    working_dir: /app
    volumes:
      - cargo-lambda-volume:/app
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: ap-northeast-1
    command:
      [
        "cargo",
        "lambda",
        "deploy",
        "--endpoint-url=http://localstack:${LOCALSTACK_GATEWAY_PORT:-4566}",
        "--binary-name=query_model_mapper",
        "restaurant-service-query-model-mapper",
      ]
    depends_on:
      mysql:
        condition: service_healthy
      terraform-apply:
        condition: service_completed_successfully
      query-model-mapper-build:
        condition: service_completed_successfully
  terraform-apply-migration:
    image: hashicorp/terraform:1.9.2
    working_dir: /terraform
    environment:
      TF_VAR_aws_service_endpoint: "http://localstack:${LOCALSTACK_GATEWAY_PORT:-4566}"
      TF_VAR_should_migrate_dynamodb_table: true
    volumes:
      - terraform-volume:/terraform
    command: ["apply", "-auto-approve"]
    depends_on:
      localstack:
        condition: service_started
      terraform-init:
        condition: service_completed_successfully
      query-model-mapper-deploy:
        condition: service_completed_successfully
volumes:
  terraform-volume:
    name: terraform
  cargo-lambda-volume:
    name: cargo-lambda
